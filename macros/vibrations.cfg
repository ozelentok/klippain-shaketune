[gcode_macro SHAKETUNE_TEST_VIBRATIONS]
description: Move the printer at different speeds to identify the speed settings that exacerbate the vibrations of the machine
gcode:
  {% set size = params.SIZE|default(80)|int %} # Absoutle length of the movement (not per axis)
  {% set direction = params.DIRECTION|default('XY') %} # XY, AB, ABXY, A, B, X, Y, Z
  {% set z_height = params.Z_HEIGHT|default(20)|int %}

  {% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}
  {% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}
  {% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}
  {% set feedrate_travel = params.TRAVEL_SPEED|default(60)|int * 60 %}
  {% set accel = params.ACCEL|default(2000)|int %}
  {% set chip = params.CHIP|default('adxl345') %}

  {% set keep_n_results = params.KEEP_N_RESULTS|default(3)|int %}
  {% set keep_csv = params.KEEP_CSV|default(1)|int %}

  {% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}

  {% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}
  {% set old_accel = printer.toolhead.max_accel %}
  {% set old_mcr = printer.toolhead.minimum_cruise_ratio %}
  {% set old_sqv = printer.toolhead.square_corner_velocity %}

  {% set direction_factor = {
    'XY' : {
      'start' : {'x': -0.5, 'y': -0.5 },
      'move_factors' : {
        '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
        '1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
        '2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
        '3' : {'x': -0.5, 'y': -0.5, 'z': 0.0 }
      }
    },
    'AB' : {
      'start' : {'x': 0.0, 'y': 0.0 },
      'move_factors' : {
        '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
        '1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
        '2' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
        '3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
        '4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
        '5' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
      }
    },
    'ABXY' : {
      'start' : {'x': -0.5, 'y': 0.5 },
      'move_factors' : {
        '0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
        '1' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
        '2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
        '3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
        '4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
        '5' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
      }
    },
    'B'  : {
      'start' : {'x': 0.5, 'y': 0.5 },
      'move_factors' : {
        '0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
        '1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 }
      }
    },
    'A'  : {
      'start' : {'x': -0.5, 'y': 0.5 },
      'move_factors' : {
        '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
        '1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
      }
     },
    'X'  : {
      'start' : {'x': -0.5, 'y': 0.0 },
      'move_factors' : {
        '0' : {'x': 0.5, 'y': 0.0, 'z': 0.0 },
        '1' : {'x': -0.5, 'y': 0.0, 'z': 0.0 }
      }
     },
    'Y'  : {
      'start' : {'x': 0.0, 'y': 0.5 },
      'move_factors' : {
        '0' : {'x': 0.0, 'y': -0.5, 'z': 0.0 },
        '1' : {'x': 0.0, 'y': 0.5, 'z': 0.0 }
      }
    },
    'Z'  : {
      'start' : {'x': 0.0, 'y': 0.0 },
      'move_factors' : {
        '0' : {'x': 0.0, 'y': 0.0, 'z': 1.0 },
        '1' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
      }
    },
    'E'  : {
      'start' : {'x': 0.0, 'y': 0.0 },
      'move_factor' : 0.05
    }
  } %}


  {% if not 'xyz' in printer.toolhead.homed_axes %}
    {action_raise_error('Must Home printer first!')}
  {% endif %}

  {% if speed_increment * 100 != (speed_increment * 100)|int %}
    {action_raise_error('Only 2 decimal digits are allowed for SPEED_INCREMENT')}
  {% endif %}

  {% if (size / (max_speed / 60)) < 0.25 and direction != 'E' %}
    {action_raise_error('SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!')}
  {% endif %}

  {% if not (direction in direction_factor) %}
    {action_raise_error('DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!')}
  {% endif %}

  {action_respond_info('')}
  {action_respond_info('Starting speed and vibration calibration')}
  {action_respond_info('This operation can not be interrupted by normal means. Hit the "emergency stop" button to stop it if needed')}
  {action_respond_info('')}

  # Set the wanted acceleration values (not too high to avoid oscillation, not too low to be able to reach constant speed on each segments)
  SAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION
  SET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}

  # Going to the start position
  G1 Z{z_height} F{feedrate_travel / 10}
  G1 X{center_x + (size * direction_factor[direction].start.x) } Y{center_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}

  G90
  # vibration pattern for each frequency
  {% for curr_sample in range(0, nb_samples) %}
    {% set curr_speed = min_speed + curr_sample * speed_increment %}
    {% set fmt_speed = '%.2f'|format(curr_speed / 60) %}
    RESPOND MSG="Current speed: {fmt_speed} mm/s"

    ACCELEROMETER_MEASURE CHIP={chip}
    {% if direction == 'E' %}
      G0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}
    {% else %}
      {% for key, factor in direction_factor[direction].move_factors|dictsort %}
        G1 X{center_x + (size * factor.x) } Y{center_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
      {% endfor %}
    {% endif %}
    ACCELEROMETER_MEASURE CHIP={chip} NAME=SP{fmt_speed|replace('.','_')}N1
    G4 P300

    M400
  {% endfor %}

  RESPOND MSG="Machine and motors vibration graph generation..."
  RESPOND MSG="This may take some time (3-5min)"
  SHAKETUNE_PROCESS_VIBRATIONS AXIS={direction} ACCEL={accel} CHIP={chip} KEEP_CSV={keep_csv}
  M400

  SHAKETUNE_REMOVE_OLD_RESULTS KEEP_N_RESULTS={keep_n_results}

  SET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_mcr} SQUARE_CORNER_VELOCITY={old_sqv}
  RESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION
